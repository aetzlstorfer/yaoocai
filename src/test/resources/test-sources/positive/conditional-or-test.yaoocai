
builtin function assertTrue (condition: boolean) -> vmfunc(32004)
builtin function assertFalse(condition: boolean) -> vmfunc(32005)

function testFourConditions(a: boolean, b: boolean, c: boolean, d: boolean): boolean {
  return a || b || c || d;
}

/*
function testThreeConditions(a: boolean, b: boolean, c: boolean): boolean {
  return a || b || c;
}

function testTwoConditions(a: boolean, b: boolean): boolean {
  return a || b;
}

function testFourConditions2(a: integer, b: integer, c: integer, d: integer): boolean {
  return a == 1 || b >= 1 || c > 0 || d != 0;
}

function testThreeConditions2(a: boolean, b: boolean, c: boolean): boolean {
  return a == 1 || b >= 1 || c > 0;
}

function testTwoConditions2(a: boolean, b: boolean): boolean {
  return a == 1 || b >= 1;
}
*/

function main() {
  assertTrue(testFourConditions(true,   true,  true,  true ));
  /*
  assertTrue(testFourConditions(false,  true,  true,  true ));
  assertTrue(testFourConditions(true,   false, true,  true ));
  assertTrue(testFourConditions(false,  false, true,  true ));
  assertTrue(testFourConditions(true,   true,  false, true ));
  assertTrue(testFourConditions(false,  true,  false, true ));
  assertTrue(testFourConditions(true,   false, false, true ));
  assertTrue(testFourConditions(false,  false, false, true ));
  assertTrue(testFourConditions(true,   true,  true,  false));
  assertTrue(testFourConditions(false,  true,  true,  false));
  assertTrue(testFourConditions(true,   false, true,  false));
  assertTrue(testFourConditions(false,  false, true,  false));
  assertTrue(testFourConditions(true,   true,  false, false));
  assertTrue(testFourConditions(false,  true,  false, false));
  assertTrue(testFourConditions(true,   false, false, false));
  assertFalse(testFourConditions(false, false, false, false));

  assertTrue( testThreeConditions(true, true, 	true));
  assertTrue(testThreeConditions(false,  true, true));
  assertTrue(testThreeConditions(true,  false, true));
  assertTrue(testThreeConditions(false, false, true));
  assertTrue(testThreeConditions(true,   true, false));
  assertTrue(testThreeConditions(false,  true, false));
  assertTrue(testThreeConditions(true,  false, false));
  assertFalse(testThreeConditions(false, false, false));

  assertTrue( testTwoConditions(true, true));
  assertTrue(testTwoConditions(false, true));
  assertTrue(testTwoConditions(true, false));
  assertFalse(testTwoConditions(false, false));

  assertTrue( testFourConditions2(1, 1, 1, 1));
  assertTrue(testFourConditions2(0, 1, 1, 1));
  assertTrue(testFourConditions2(1, 0, 1, 1));
  assertTrue(testFourConditions2(0, 0, 1, 1));
  assertTrue(testFourConditions2(1, 1, 0, 1));
  assertTrue(testFourConditions2(0, 1, 0, 1));
  assertTrue(testFourConditions2(1, 0, 0, 1));
  assertTrue(testFourConditions2(0, 0, 0, 1));
  assertTrue(testFourConditions2(1, 1, 1, 0));
  assertTrue(testFourConditions2(0, 1, 1, 0));
  assertTrue(testFourConditions2(1, 0, 1, 0));
  assertTrue(testFourConditions2(0, 0, 1, 0));
  assertTrue(testFourConditions2(1, 1, 0, 0));
  assertTrue(testFourConditions2(0, 1, 0, 0));
  assertTrue(testFourConditions2(1, 0, 0, 0));
  assertFalse(testFourConditions2(0, 0, 0, 0));

  assertTrue( testThreeConditions2(1, 1, 1));
  assertTrue(testThreeConditions2(0, 1, 1));
  assertTrue(testThreeConditions2(1, 0, 1));
  assertTrue(testThreeConditions2(0, 0, 1));
  assertTrue(testThreeConditions2(1, 1, 0));
  assertTrue(testThreeConditions2(0, 1, 0));
  assertTrue(testThreeConditions2(1, 0, 0));
  assertFalse(testThreeConditions2(0, 0, 0));

  assertTrue( testTwoConditions2(1, 1));
  assertTrue(testTwoConditions2(0, 1));
  assertTrue(testTwoConditions2(1, 0));
  assertFalse(testTwoConditions2(0, 0));
  */
}
